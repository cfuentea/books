generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Book {
  id          String    @id @default(cuid())
  title       String
  author      String
  isbn        String?   @unique
  cover       String?
  publishedAt DateTime?
  description String?
  notes       String?
  
  // Nuevos campos
  purchaseDate DateTime?    // Fecha de compra
  price        Decimal?     // Precio (opcional)
  condition    BookCondition @default(GOOD) // Estado del libro
  location     String?      // Ubicación física
  isLent       Boolean      @default(false) // Si está prestado
  lentTo       String?      // A quién está prestado
  lentAt       DateTime?    // Cuándo se prestó
  tags         String?      // Etiquetas personalizadas (separadas por comas)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  status        UserStatus @default(PENDING)
  invitedBy     String?
  inviteCode    String?   @unique
  createdAt     DateTime  @default(now())
  accounts      Account[]
  books         Book[]
  sessions      Session[]
}

model InviteCode {
  id        String   @id @default(cuid())
  code      String   @unique
  email     String?
  used      Boolean  @default(false)
  usedBy    String?
  usedAt    DateTime?
  expiresAt DateTime?
  createdAt DateTime @default(now())
  createdBy String?
}

model WaitlistEntry {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  message   String?
  status    WaitlistStatus @default(PENDING)
  createdAt DateTime @default(now())
  invitedAt DateTime?
  invitedBy String?
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
  DELETED
}

enum WaitlistStatus {
  PENDING
  INVITED
  REGISTERED
  REJECTED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum BookCondition {
  NEW         // Nuevo
  LIKE_NEW    // Como nuevo
  GOOD        // Bueno
  FAIR        // Regular
  POOR        // Malo
}
